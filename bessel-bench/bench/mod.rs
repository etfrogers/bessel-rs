extern crate test;
use crate::{bessel_j, bessel_k};
use complex_bessel_rs::bessel_j::bessel_j as bessel_j_fort;
use complex_bessel_rs::bessel_k::bessel_k as bessel_k_fort;
use num::Complex;
use test::Bencher;

// TODO move to helper crate

#[bench]
fn bench_rust_besj(b: &mut Bencher) {
    let cases = CASES.map(|(order, re, im)| (order, Complex::new(re, im)));
    b.iter(|| {
        for (order, z) in cases {
            let _ = bessel_j(order, z);
        }
        return 0;
    });
}

#[bench]
fn bench_fortran_besj(b: &mut Bencher) {
    let cases = CASES.map(|(order, re, im)| (order, Complex::new(re, im)));
    b.iter(|| {
        for (order, z) in cases {
            let _ = bessel_j_fort(order, z);
        }
        return 0;
    });
}

#[bench]
fn bench_rust_besk(b: &mut Bencher) {
    let cases = CASES.map(|(order, re, im)| (order, Complex::new(re, im)));
    b.iter(|| {
        for (order, z) in cases {
            let _ = bessel_k(order, z);
        }
        return 0;
    });
}

#[bench]
fn bench_fortran_besk(b: &mut Bencher) {
    let cases = CASES.map(|(order, re, im)| (order, Complex::new(re, im)));
    b.iter(|| {
        for (order, z) in cases {
            let _ = bessel_k_fort(order, z);
        }
        return 0;
    });
}

const CASES: [(f64, f64, f64); 46] = [
    (4.0, 2.1, 0.0),
    (5.0, 2.0001, 0.0),
    (340.0, 35.0001, 0.0),
    (407.3, -325.1, 635.2),
    (465.0, -867.0, -448.0), // 5
    (10.711871220659752, -6.89931119845653, -9.408182256887017),
    (8.544950848779838, -8.645033163963603, 18.976439189605003),
    (21.04, 53.19, -40.77),
    (4.0, 2.1, 0.0),
    (5.0, 2.0001, 0.0), // 10
    (340.0, 35.0001, 0.0),
    (899.6, -35.7, 317.8),
    (531.0, -106.7, -16.0),
    (531.0, -106.0, -16.0),
    (433.0, 16.874, -38.17), //15
    (433.0, 16.8, -38.17),
    (311.2078694557452, -10.990141170168044, -25.70154097357056),
    (8.544950848779838, -8.645033163963603, 18.976439189605003),
    (17.5, 70.3, 37.4),
    (13.337522865795481, -29.8266399174247, 17.66323218839807), //20
    (5423.24, -7915.11, -3113.95),
    (2213.0, -1813.0, -1033.0),
    (5514.86274463943, -9489.650336481069, 4951.6909981261),
    (2.74e-288, 6.33e-166, 7.53e-275),
    (1.51e-150, -3.07e-118, 3.51e-42), //25
    (2.637e-27, -4.01e-50, 0.0),
    (4.0e-132, 0e0, 445.0),
    (8714.0, 8904.0, -10.0),
    (60.9, 246.2, -982.5),
    (40.5, 1673.3, -4.0), // 30
    (2634.5, -2634.5, 14.1),
    (5.007e-14, 4.401331657952316e-5, -3.6e-6),
    (1719.3, 920.1, 0.0),
    (
        3.5695132850479827e3,
        -2.2313404290100934e3,
        8.646324128723001e3,
    ),
    (0.28008208034835413, -2435.84398720043, -9106.813568430613), // 35
    (35.42423142304685, 2689.1019240048972, -688.7899868054337),
    (1.0111752223029848, 7037.518427975952, -685.0803465010631),
    (9491.159287083694, -2404.8869667701747, -6391.664651975572),
    (
        3.468367867017804e0,
        -1.8067397106295227e-254,
        -3.0255676077184667e-21,
    ),
    (6.946702885186345e-149, 0e0, -6.691424259254966e2), // 40
    (
        3.684122892548987e3,
        -5.107972475729046e3,
        5.916387337090975e3,
    ),
    (
        7.107636998006379e3,
        -1.867258055869096e3,
        4.865284129480511e3,
    ),
    (
        172302836.50840142,
        1.2494954195932068e-254,
        -981457506.31791925,
    ),
    (645.0, -736006017.5, 0.0),
    (1253.5, 0.0, 2102.4),
    (1.0, -4816.864663442315, 9.992997770079455),
];
